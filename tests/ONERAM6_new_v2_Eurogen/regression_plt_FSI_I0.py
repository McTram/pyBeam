#!/usr/bin/env python
#
# pyBeam, a Beam Solver
#
# Copyright (C) 2018 Ruben Sanchez, Rocco Bombardieri, Rauno Cavallaro
# 
# Developers: Ruben Sanchez (SciComp, TU Kaiserslautern)
#             Rocco Bombardieri, Rauno Cavallaro (Carlos III University Madrid)
#
# This file is part of pyBeam.
#
# pyBeam is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# pyBeam is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# See the GNU Affero General Public License for more details.
# You should have received a copy of the GNU Affero
# General Public License along with pyBeam.
# If not, see <http://www.gnu.org/licenses/>.
#

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import sys, os
from pyBeamLib import pyBeamSolver

# Load running directory
file_dir = os.path.dirname(os.path.realpath(__file__))

beam = pyBeamSolver(file_dir ,'config_NL_fsi.cfg')

beam.SetLoads(0 , 0.00012860102470652442 , 4.539873887736378e-05 , 0.0011434484675582432)
beam.SetLoads(1 , 0.00010687413033783405 , 3.0135813957394597e-05 , 0.0012289845743650594)
beam.SetLoads(2 , 8.651004043980681e-05 , 1.7864804811960376e-05 , 0.0013010743928593205)
beam.SetLoads(3 , 6.751491225965724e-05 , 8.589929574134154e-06 , 0.00135969964761212)
beam.SetLoads(4 , 4.988448351319284e-05 , 2.3107633773312348e-06 , 0.0014048413756052962)
beam.SetLoads(5 , 3.361715185489298e-05 , -9.746478456540727e-07 , 0.0014365333536102206)
beam.SetLoads(6 , 1.871790582975545e-05 , -1.2646366219755328e-06 , 0.0014547436824016403)
beam.SetLoads(7 , 5.183747000302991e-06 , 1.4397254491328802e-06 , 0.00145951800792651)
beam.SetLoads(8 , -6.986826418269908e-06 , 7.139912148596652e-06 , 0.0014508121454421094)
beam.SetLoads(9 , -1.7789606821180922e-05 , 1.5833682095441417e-05 , 0.0014286280954198787)
beam.SetLoads(10 , -2.722684464871377e-05 , 2.7521734241325925e-05 , 0.0013929789227835243)
beam.SetLoads(11 , -3.5298539900868214e-05 , 4.220406858624998e-05 , 0.0013438646275330303)
beam.SetLoads(12 , -4.200820916036633e-05 , 5.9886013464723425e-05 , 0.0012813323395191151)
beam.SetLoads(13 , -4.734898136567236e-05 , 8.055782433377405e-05 , 0.0012052887880691066)
beam.SetLoads(14 , -5.132421099560034e-05 , 0.00010422391740186461 , 0.0011157801140049737)
beam.SetLoads(15 , -5.393536803912413e-05 , 0.00013088989604024157 , 0.0010128101506587288)
beam.SetLoads(16 , -5.517941494772527e-05 , 0.0001605451665288136 , 0.0008963700773928376)
beam.SetLoads(17 , -5.5060971778581356e-05 , 0.0001931977788693441 , 0.0007665154315579067)
beam.SetLoads(18 , -5.3575370582378086e-05 , 0.00022884935543016972 , 0.0006231476277223288)
beam.SetLoads(19 , -5.072295186875263e-05 , 0.0002674883846419082 , 0.00046631317564279)
beam.SetLoads(20 , 0.00013416687525990355 , -4.67084218065001e-05 , 0.001545338790148369)
beam.SetLoads(21 , 0.00010499629421122236 , -4.9827977239385485e-05 , 0.0016903126794340503)
beam.SetLoads(22 , 7.753091652399416e-05 , -5.04271829395888e-05 , 0.0018186126974901302)
beam.SetLoads(23 , 5.178099486778682e-05 , -4.850217333439924e-05 , 0.0019301817640933275)
beam.SetLoads(24 , 2.7741326235308212e-05 , -4.4055178898463884e-05 , 0.0020250491051616642)
beam.SetLoads(25 , 5.407320980284713e-06 , -3.708604849180189e-05 , 0.002103238460113583)
beam.SetLoads(26 , -1.5211688259720028e-05 , -2.7594489017791546e-05 , 0.0021647009784994445)
beam.SetLoads(27 , -3.412044447599515e-05 , -1.558094471303566e-05 , 0.002209461771350422)
beam.SetLoads(28 , -5.132307729881465e-05 , -1.0434781995079312e-06 , 0.0022375404631982112)
beam.SetLoads(29 , -6.681117412261641e-05 , 1.601463114332261e-05 , 0.002248896433366714)
beam.SetLoads(30 , -8.058901792268802e-05 , 3.5594725316898934e-05 , 0.0022435506780003507)
beam.SetLoads(31 , -9.265660869903103e-05 , 5.769680432122106e-05 , 0.0022215031970991166)
beam.SetLoads(32 , -0.00010301746272090174 , 8.232518714894345e-05 , 0.002182768128695133)
beam.SetLoads(33 , -0.00011166439410477105 , 0.00010947183119134006 , 0.0021273158251114204)
beam.SetLoads(34 , -0.00011860107246491062 , 0.00013914046006448252 , 0.0020551617959928456)
beam.SetLoads(35 , -0.00012383055405457732 , 0.00017133717899907118 , 0.001966316064484721)
beam.SetLoads(36 , -0.0001273422770817744 , 0.00020604866361953613 , 0.0018607108908688546)
beam.SetLoads(37 , -0.00012914783813085088 , 0.00024328350494578062 , 0.0017384480945366236)
beam.SetLoads(38 , -0.00012924574231828703 , 0.000283048222547733 , 0.001599489480634699)
beam.SetLoads(39 , -0.00012763064397489188 , 0.00032532762891205236 , 0.0014438218616199935)
beam.SetLoads(40 , -2.359404268772201e-05 , 8.295546278820108e-05 , 0.00034105948329941606)
beam.SetLoads(41 , -2.7604994361394784e-05 , 5.405625026487784e-05 , 0.0003465408316413074)
beam.SetLoads(42 , -3.09240966618276e-05 , 2.8749227642794096e-05 , 0.00034318674268534914)
beam.SetLoads(43 , -3.3543954882530096e-05 , 7.043629301206391e-06 , 0.000331030007286329)
beam.SetLoads(44 , -3.547200904964426e-05 , -1.1066798991973912e-05 , 0.00031002847178692643)
beam.SetLoads(45 , -3.670001693731823e-05 , -2.5580967427873222e-05 , 0.00028023730245195825)
beam.SetLoads(46 , -3.723341285430034e-05 , -3.649634346236256e-05 , 0.00024162486950656906)
beam.SetLoads(47 , -3.7073978963151174e-05 , -4.381727427556192e-05 , 0.00019416154933890405)
beam.SetLoads(48 , -3.621548298977147e-05 , -4.753930177511436e-05 , 0.00013791220045189167)
beam.SetLoads(49 , -3.4664271808843146e-05 , -4.7667101649794765e-05 , 7.280673833013781e-05)
beam.SetLoads(50 , -3.241549465362075e-05 , -4.419588883572417e-05 , -1.0810348757990277e-06)
beam.SetLoads(51 , -2.9471348647648295e-05 , -3.712806789629092e-05 , -8.378642188719301e-05)
beam.SetLoads(52 , -2.583179557999523e-05 , -2.6464077793629055e-05 , -0.00017535581010486804)
beam.SetLoads(53 , -2.149655612105256e-05 , -1.2202642672460076e-05 , -0.0002756992808571791)
beam.SetLoads(54 , -1.6466093500985256e-05 , 5.651546380229258e-06 , -0.0003849078420866853)
beam.SetLoads(55 , -1.0738865128109841e-05 , 2.7110806785962852e-05 , -0.0005028940203065525)
beam.SetLoads(56 , -4.316625218263453e-06 , 5.215812677717117e-05 , -0.0006297447234901489)
beam.SetLoads(57 , 2.800787312883786e-06 , 8.080615074690037e-05 , -0.0007653635345030072)
beam.SetLoads(58 , 1.0614519546813066e-05 , 0.0001130575520889804 , -0.0009098078922749141)
beam.SetLoads(59 , 1.912424751492293e-05 , 0.00014889436956017 , -0.001063120380126772)
beam.SetLoads(60 , 8.99001741415401e-07 , 0.0001593109446927236 , 0.006294959463751101)
beam.SetLoads(61 , -2.1507605995856363e-05 , 0.00014330551635845264 , 0.006288087579841195)
beam.SetLoads(62 , -4.241479022793387e-05 , 0.00013023299462441024 , 0.006267842255290842)
beam.SetLoads(63 , -6.174765329287435e-05 , 0.00012003775309514706 , 0.006231563272374067)
beam.SetLoads(64 , -7.954463194960255e-05 , 0.00011274917342890599 , 0.006180549970159985)
beam.SetLoads(65 , -9.580759217990757e-05 , 0.00010836545211864505 , 0.006114839243644294)
beam.SetLoads(66 , -0.00011053064460214544 , 0.00010688777993108541 , 0.006034391893230803)
beam.SetLoads(67 , -0.0001237560606236217 , 0.00010834757003314276 , 0.00594061145400767)
beam.SetLoads(68 , -0.00013540906449361435 , 0.00011268251824756197 , 0.005830755566609448)
beam.SetLoads(69 , -0.00014552248783530796 , 0.00011992169472803156 , 0.005706166797891772)
beam.SetLoads(70 , -0.00015409900264332592 , 0.00013006602150498505 , 0.005566861629050325)
beam.SetLoads(71 , -0.00016113860891766763 , 0.00014311549857842155 , 0.005412840060085157)
beam.SetLoads(72 , -0.00016668873378874357 , 0.00015911034905876072 , 0.005245540796081653)
beam.SetLoads(73 , -0.00017065561951621697 , 0.0001779715245037426 , 0.0050620942089360165)
beam.SetLoads(74 , -0.00017308559671001472 , 0.00019973785024520922 , 0.004863931221666657)
beam.SetLoads(75 , -0.00017398046426834432 , 0.00022441510370710405 , 0.004651058333082699)
beam.SetLoads(76 , -0.00017338396612423063 , 0.0002520290625871873 , 0.004424877796430859)
beam.SetLoads(77 , -0.0001712069872226337 , 0.00028251494144578113 , 0.004182621476777114)
beam.SetLoads(78 , -0.0001674918984206519 , 0.00031591086443235526 , 0.003925603427310588)
beam.SetLoads(79 , -0.00016223832029941382 , 0.00035220494632053106 , 0.003653864973537616)
beam.SetLoads(80 , 0.0002563249440845945 , -6.851485637705641e-05 , -0.004008108479328001)
beam.SetLoads(81 , 0.00023527676405815868 , -8.303521448940973e-05 , -0.0038301622852988495)
beam.SetLoads(82 , 0.00021545480338865472 , -9.450464980536844e-05 , -0.003665735298438851)
beam.SetLoads(83 , 0.00019679645746177818 , -0.00010285909830243005 , -0.0035122038068726353)
beam.SetLoads(84 , 0.00017933164931962614 , -0.00010812879206059344 , -0.003370905098478217)
beam.SetLoads(85 , 0.00016305904025294628 , -0.00011031583570722791 , -0.003241808514708543)
beam.SetLoads(86 , 0.00014798271797009042 , -0.0001094180850633616 , -0.003124938654417886)
beam.SetLoads(87 , 0.00013413896631983438 , -0.00010546909708555334 , -0.003021607780351544)
beam.SetLoads(88 , 0.00012144998709267125 , -9.840361883608313e-05 , -0.002929161862989614)
beam.SetLoads(89 , 0.00010995703669409987 , -8.825520383802681e-05 , -0.0028489394883336777)
beam.SetLoads(90 , 9.965828623817483e-05 , -7.502337621850155e-05 , -0.0027809310077321235)
beam.SetLoads(91 , 9.055373572489697e-05 , -5.870813597750725e-05 , -0.0027251364211849332)
beam.SetLoads(92 , 8.26837871568504e-05 , -3.933905006646878e-05 , -0.0026829001909434145)
beam.SetLoads(93 , 7.596840858520887e-05 , -1.6856558092753512e-05 , -0.0026515391959765922)
beam.SetLoads(94 , 7.044722995621521e-05 , 8.709346502430785e-06 , -0.002632392095064137)
beam.SetLoads(95 , 6.611911019012807e-05 , 3.736409303763435e-05 , -0.002625457720351114)
beam.SetLoads(96 , 6.303387533214289e-05 , 6.906071592976681e-05 , -0.0026321559810809454)
beam.SetLoads(97 , 6.109315592627408e-05 , 0.00010388010152859222 , -0.0026496076376372807)
beam.SetLoads(98 , 6.034866599970419e-05 , 0.00014178736995990032 , -0.0026793239293319993)
beam.SetLoads(99 , 6.079934511429068e-05 , 0.00018277138331130414 , -0.0027212531621580317)

beam.Run()

beam.coordinate_Y1 = beam.coordinate_Y; beam.coordinate_X1 = beam.coordinate_X; beam.coordinate_Z1 = beam.coordinate_Z


fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

# Create cubic bounding box to simulate equal aspect ratio
max_range = np.array([np.amax(beam.coordinate_X0) - np.amin(beam.coordinate_X0), np.amax(beam.coordinate_Y0) - np.amin(beam.coordinate_Y0),
                      np.amax(beam.coordinate_Z0) - np.amin(beam.coordinate_Z0)]).max()
Xb = 0.5 * max_range * np.mgrid[-1:2:2, -1:2:2, -1:2:2][0].flatten() + 0.5 * (
            np.amax(beam.coordinate_X0) + np.amin(beam.coordinate_X0))
Yb = 0.5 * max_range * np.mgrid[-1:2:2, -1:2:2, -1:2:2][1].flatten() + 0.5 * (
            np.amax(beam.coordinate_Y0) + np.amin(beam.coordinate_Y0))
Zb = 0.5 * max_range * np.mgrid[-1:2:2, -1:2:2, -1:2:2][2].flatten() + 0.5 * (
            np.amax(beam.coordinate_Z0) + np.amin(beam.coordinate_Z0))
# Comment or uncomment following both lines to test the fake bounding box:
for xb, yb, zb in zip(Xb, Yb, Zb):
    plt.plot([xb], [yb], [zb], 'w')

#plt.plot(beam.coordinate_X2[0:20], beam.coordinate_Y2[0:20], beam.coordinate_Z2[0:20],'r')
plt.plot(beam.coordinate_X1[0:20], beam.coordinate_Y1[0:20], beam.coordinate_Z1[0:20],'b')
plt.plot(beam.coordinate_X0[0:20], beam.coordinate_Y0[0:20], beam.coordinate_Z0[0:20],'g')
rigid = 80

for i in range(19,19+rigid):
    node_i = int(beam.elem_py[i].GetNodes()[0, 0] - 1)
    node_j = int(beam.elem_py[i].GetNodes()[1, 0] - 1)
    #plt.plot([ beam.coordinate_X2[node_i],beam.coordinate_X2[node_j] ], [ beam.coordinate_Y2[node_i],beam.coordinate_Y2[node_j] ], [ beam.coordinate_Z2[node_i],beam.coordinate_Z2[node_j] ],'r')
    plt.plot([ beam.coordinate_X1[node_i],beam.coordinate_X1[node_j] ], [ beam.coordinate_Y1[node_i],beam.coordinate_Y1[node_j] ], [ beam.coordinate_Z1[node_i],beam.coordinate_Z1[node_j] ],'b')
    plt.plot([ beam.coordinate_X0[node_i],beam.coordinate_X0[node_j] ], [ beam.coordinate_Y0[node_i],beam.coordinate_Y0[node_j] ], [ beam.coordinate_Z0[node_i],beam.coordinate_Z0[node_j] ],'g')



plt.xlabel('X')
plt.ylabel('Y')
plt.show()

for i in range(beam.nPoint):
    print('{} {}  {}  {} '.format(i, beam.displacement_X[i],beam.displacement_Y[i],beam.displacement_Z[i]) )
